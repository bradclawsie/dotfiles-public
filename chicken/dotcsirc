(import (chicken load))

;; base modules
(import (chicken sort))
(import (chicken random))
(import (chicken condition))
(import (chicken irregex))

;; srfis
(import srfi-1)  ;; lists
(import srfi-13) ;; strings
(import srfi-69) ;; hashtables

;; eggs

;; string-utils
(import string-hexadecimal)
(import to-hex)

;; brev-separate
(import brev-separate)

;; defstruct
(import defstruct)

;; miscmacros
(import miscmacros)

;; regex-case
(import regex-case)

;; simple-exceptions
(import simple-exceptions)

;; simple-loops
(import simple-loops)

;; http-client
(import http-client (chicken port) (chicken io))

;; sqlite3
(import sqlite3)
(import sql-null)

;; slice
;; (import slice) ;; already imported at this point

;; sha2
(import sha2)

;; uuid
(import uuid)

;; medea
(import medea)

(load-verbose #f)

(let ()
  (import (chicken base))
  (import (chicken format))
  (import (chicken process-context))
  (import (chicken process signal))
  (unless (get-environment-variable "INSIDE_EMACS")
    (import breadline)
    (import breadline-scheme-completion)
    (history-file (format "~a/.csi_history" (get-environment-variable "HOME")))
    (stifle-history! 10000)
    (completer-word-break-characters-set! "\"\'`;|(")
    (completer-set! scheme-completer)
    (basic-quote-characters-set! "\"|")
    (variable-bind! "blink-matching-paren" "on")
    (paren-blink-timeout-set! 200000)
    (let ((handler (signal-handler signal/int)))
      (set-signal-handler! signal/int
                           (lambda (s)
                             (cleanup-after-signal!)
                             (reset-after-signal!)
                             (handler s))))
    (on-exit reset-terminal!)
    (current-input-port (make-readline-port))))
