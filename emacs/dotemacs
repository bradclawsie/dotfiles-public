;; -------------------------------------------------------------
;; basic editor look and feel
(setq-default indent-tabs-mode nil)
(setq-default column-number-mode t)
(set-default-coding-systems 'utf-8)
(setq-default tramp-default-user "brad")
(setq-default tramp-default-host "localhost")
(setq-default pgg-default-user-id "Brad Clawsie <brad@b7j0c.org>")
(setq-default pgg-query-keyserver nil)
(setq confirm-nonexistent-file-or-buffer nil)
(setq inhibit-splash-screen t)
(setq display-time-24hr-format t)
(setq debug-on-error t)
(setq next-line-add-newlines nil)
(setq scroll-step 1)
(set-input-mode nil nil t)
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))
(setq-default transient-mark-mode t)
(setq-default require-final-newline t)

;; -------------------------------------------------------------
;; revert from disk automatically
(setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode)

;; -------------------------------------------------------------
;; packages
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

;; company-go requires gopls
;; docker is documented at https://github.com/Silex/docker.el
;; flyspell-correct requires aspell, aspell-en
;; pinentry requires pinentry
;; go-mode requires goimports
;; magit-delta requires git-delta
;; vterm requires libvterm, cmake
(setq package-selected-packages
      '( company
         company-go
         deno-fmt
         docker
         dockerfile-mode
         fish-completion
         fish-mode
         flycheck-guile
         flyspell-correct
         go-mode
         helm
         helm-ag
         helm-perldoc
         lsp-mode
         lsp-ui
         magit
         magit-delta
         markdown-mode
         paredit
         perl-doc
         pinentry
         rustic
         toml-mode
         typescript-mode
         vterm
         yaml-mode
         yasnippet ))

(setq package-native-compile t
      native-comp-async-report-warnings-errors nil
      package-quickstart t
      vterm-always-compile-module t)

(unless (seq-every-p #'package-installed-p package-selected-packages)
  (package-refresh-contents)
  (package-install-selected-packages t))

;; -------------------------------------------------------------
;; shortcuts
(global-set-key "\C-l" 'goto-line)
(global-set-key "\C-h" 'delete-backward-char)
(global-set-key (kbd "\C-x w") 'kill-region)
(global-set-key (kbd "<f3>") 'magit-status)
(global-set-key (kbd "<f4>") 'eshell)
(global-set-key (kbd "<f5>") 'rename-buffer)
;; f6 assigned to a function below
;; f7 reserved for rust testing below
;; f8 reserved for rust compilation below
(fset 'switchbuffers
   [?\C-x ?b])
(global-set-key (kbd "C-c b") 'switchbuffers)

;; -------------------------------------------------------------
;; common input
(global-set-key [mouse-2] 'yank)
(global-font-lock-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)

;; -------------------------------------------------------------
;; show whitespace
(setq-default show-trailing-whitespace t)
(setq-default indicate-empty-lines t)
(setq-default indicate-buffer-boundaries 'left)

;; -------------------------------------------------------------
;; highlight matching pairs of parentheses
(setq show-paren-delay 0)
(show-paren-mode)

;; -------------------------------------------------------------
;; magit addons
(add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1)))

;; -------------------------------------------------------------
;; helm
(custom-set-variables
 '(helm-ag-base-command "ack --nocolor --nogroup"))

;; -------------------------------------------------------------
;; ido
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(setq ido-use-filename-at-point 'guess)
(setq ido-create-new-buffer 'always)

;; -------------------------------------------------------------
;; don't get clever and try to ping things that look like domains
(setq ffap-machine-p-known 'reject)

;; -------------------------------------------------------------
;; eshell
(setq eshell-prompt-function
  (lambda nil (concat "" " $ ")))

(defun my-eshell-init ()
  "Function to run in new eshell buffers."
  (fish-completion-mode)
  (setq-local show-trailing-whitespace nil)
  (setq-local indicate-empty-lines nil)
  (setenv "TERM" "dumb-emacs-ansi")
  (setenv "GIT_PAGER" "cat")
  (setenv "PAGER" "cat"))

(add-hook 'eshell-mode-hook #'my-eshell-init)

;; -------------------------------------------------------------
;; vterm
(defun my-vterm-init ()
  (setq-local show-trailing-whitespace nil)
  (setq-local indicate-empty-lines nil))

(add-hook 'vterm-mode-hook #'my-vterm-init)

;; -------------------------------------------------------------
;; company
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)

;; -------------------------------------------------------------
;; flyspell
(setq ispell-dictionary "en_US"
      ispell-program-name "aspell"
      ispell-extra-args '("--camel-case")
      flyspell-issue-message-flag nil
      flyspell-mode-line-string nil
      flyspell-duplicate-distance 0
      flyspell-use-meta-tab nil)

(defun enable-flyspell ()
  "Enable `flyspell-mode' if buffer can be modified."
  (unless buffer-read-only (flyspell-mode)))

(add-hook 'markdown-mode-hook #'enable-flyspell)
(add-hook 'text-mode-hook #'enable-flyspell)

;; -------------------------------------------------------------
;; language modes

(global-prettify-symbols-mode)

;; lsp
(require 'lsp-mode)
(add-hook 'lsp-mode-hook 'company-mode)

;; go
(add-hook 'go-mode-hook #'lsp-deferred)
(add-hook 'go-mode-hook #'yas-minor-mode-on)

(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

;; typescript/js/deno
(add-hook 'typescript-mode-hook #'lsp-deferred)
(add-hook 'typescript-mode-hook #'yas-minor-mode-on)
(add-hook 'typescript-mode-hook 'deno-fmt-mode)
(add-hook 'js2-mode-hook 'deno-fmt-mode)
;; be like deno fmt
(setq typescript-indent-level 2)

;; paredit
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)

;; perl
(add-to-list 'auto-mode-alist '("\\.\\(p\\([lm]\\)\\)\\'" . perl-mode))
(add-to-list 'auto-mode-alist '("\\.t\\'" . perl-mode))
(add-to-list 'lsp-language-id-configuration '(perl-mode . "perl"))
(add-to-list 'lsp-language-id-configuration '(".*\\.pl$" . "perl"))
(add-to-list 'lsp-language-id-configuration '(".*\\.pm$" . "perl"))

;; markdown, text
;; run auto-fill whenever editing
(add-hook 'markdown-mode-hook #'auto-fill-mode)
(add-hook 'text-mode-hook #'auto-fill-mode)

;;; rust
(setq rustic-format-on-save t)
(add-hook 'rustic-mode-hook #'yas-minor-mode-on)
(global-set-key (kbd "<f7>") 'rustic-cargo-current-test)
(global-set-key (kbd "<f8>") 'rustic-cargo-build)

;; -------------------------------------------------------------
;; time-related funcs
(defun insert-time ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d-%R")))

(defun insert-unixtime ()
  (interactive)
  (insert (format-time-string "%s")))

(defun insert-date ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

;; -------------------------------------------------------------
;; revert all buffers with no confirm, and alias to f6
(defun revert-all-buffers ()
  "Refreshes all open buffers from their respective files."
  (interactive)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (and (buffer-file-name) (file-exists-p (buffer-file-name)) (not (buffer-modified-p)))
        (revert-buffer t t t) )))
      (message "Refreshed open files."))
(global-set-key (kbd "<f6>") 'revert-all-buffers)

;; -------------------------------------------------------------
;; file creation
;; requires $HOME/.auto-save to exist
(setq auto-save-file-name-transforms
      `((".*" ,(file-name-concat user-emacs-directory ".auto-save/") t))
      make-backup-files nil
      create-lockfiles nil
      custom-file null-device)

(make-directory (file-name-concat user-emacs-directory ".auto-save/") :parents)

;; -------------------------------------------------------------
;; fix weird tls issue with packages
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

;; -------------------------------------------------------------
;; server
(pinentry-start)
(display-time)
(server-start)
